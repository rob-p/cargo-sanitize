{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation for cargo-sanitize","text":"<p>Documentation for the <code>cargo-sanitize</code> program </p>"},{"location":"#purpose","title":"Purpose","text":"<p>The <code>cargo-sanitize</code> program removes custom paths / sources from dependencies in your <code>Cargo.toml</code> file  (i.e. those pointing to <code>git</code> repositories or local <code>paths</code>).  It is intended to provide a super lightweight  version of the transformation that <code>cargo publish</code> does to your <code>Cargo.toml</code> file before publishing to  <code>crates.io</code>.</p>"},{"location":"#use","title":"Use","text":"<p>To use <code>cargo-sanitize</code>, you simply pass the executable your current <code>Cargo.toml</code> file.  If you provide no  output path, the new <code>Cargo.toml</code> contents will be written directly to <code>stdout</code>.  Alternatively, you can  provide the new file path with the <code>-o</code> option.  A standard invocation might look like:</p> <pre><code>cargo-sanitize -i Cargo.toml.orig &gt; Cargo.toml\n</code></pre> <p>Here, we are assuming that you have already copied your \"source\" <code>Cargo.toml</code> to the file <code>Cargo.toml.orig</code>, and  this command will then write the sanitized version to the path <code>Cargo.toml</code>.</p>"},{"location":"#features","title":"Features","text":"<p><code>cargo-sanitize</code> provides the optional <code>validate_crates</code> feature.  This feature will query the cargo registry for the dependencies listed in your <code>Cargo.toml</code>, and will succeed only if there is a compatible version of each  declared dependency present in the registry (compatibility is determined via the semver crate).</p> <p>This can ensure that, e.g. if you are relying on a local path at a particular version, that version (or a compatible one)  is also available downstream in the official registry.  </p> <p>If you install <code>cargo-sanitize</code> with this feature, then you can use the <code>--validate-type</code> option to validate either  (1) all of the dependencies (by passing <code>--validate-type all</code>) or (2) only the dependencies that are rewritten  (by passing <code>--validate-type rewritten</code>).  Note: Even if you enable this feature, the default value for the  <code>--validate-type</code> option is <code>none</code>, which will not perform validation.  This behavior is designed so that <code>cargo-sanitize</code> need not require network access by default to sanitize the input <code>Cargo.toml</code> file.</p>"}]}